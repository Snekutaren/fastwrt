#!/usr/bin/fish
# FastWrt Static DHCP Lease Extractor
# Converts OpenWrt static DHCP leases to maclist.csv format

# Set colors for better readability
set green (echo -e "\033[0;32m")
set yellow (echo -e "\033[0;33m")
set red (echo -e "\033[0;31m")
set blue (echo -e "\033[0;34m")
set purple (echo -e "\033[0;35m")
set reset (echo -e "\033[0m")

# Output file path
set OUTPUT_FILE "maclist2.csv"

echo "$purple""FastWrt Static DHCP Lease Extractor""$reset"
echo "$blue""Extracting static DHCP leases from UCI configuration...""$reset"

# Clean output file and add header
cat > "$OUTPUT_FILE" << 'EOF'
### FastWrt Device Registry - Configuration File
### This file contains a list of MAC addresses and their corresponding IP addresses and device names.
### Format: MAC_ADDRESS,IP_ADDRESS,DEVICE_NAME,NETWORK
### 
### Examples:
### - MAC Address: Standard format with colons (AA:BB:CC:DD:EE:FF)
### - IP Address: Static IP for this device (10.0.0.50)
### - Device Name: Alphanumeric name with hyphens (my-device)
### - Network: One of: core, guest, iot, meta, nexus, or nodes (derived from IP address subnet)
###
### Network Determination:
### - 10.0.0.x → core
### - 10.0.10.x → nexus
### - 10.0.20.x → nodes
### - 10.0.70.x → meta
### - 10.0.80.x → iot
### - 192.168.90.x → guest
###
### Special naming conventions:
### - Devices ending in -eth are Ethernet connections (not used for MAC filtering)
### - Devices ending in -wifi are WiFi connections (used for MAC filtering)
### - Devices with IP address ending in .1 are identified as routers with format "{network}-router"
### - If network is omitted, "core" is assumed as default
###
### For any questions about this file, refer to the FastWrt documentation
### Generated by extract-maclist.fish on $(date "+%Y-%m-%d %H:%M:%S")

EOF

# Function to determine network based on IP subnet
function determine_network_from_ip
    set ip $argv[1]
    
    # Extract first two octets for basic network determination
    set ip_prefix (echo $ip | cut -d. -f1-2)
    s likely a router IP address
    switch $ip_prefixally have .1 as the last octet in their subnet
        case "10.0"
            # Check third octet for specific networks
            set third_octet (echo $ip | cut -d. -f3)- identify the subnet it manages
            switch $third_octetx
                case "0"
                    echo "core"hird octet for specific networks
                case "10"(echo $ip | cut -d. -f3)
                    echo "nexus"hird_octet
                case "20"
                    echo "nodes"cho "core-router"
                case "70"
                    echo "meta"cho "nexus-router"
                case "80"
                    echo "iot"echo "nodes-router"
                case "*"
                    echo "core"  # Default for 10.0.x.x         echo "meta-router"
            endse "80"
        case "192.168"
            # Check third octet for guest network
            set third_octet (echo $ip | cut -d. -f3)"  # Default for 10.0.x.x routers
            if test "$third_octet" = "90"
                echo "guest" "192.168"
            else
                echo "core"  # Default for other 192.168.x.x set third_octet (echo $ip | cut -d. -f3)
            endif test "$third_octet" = "90"
        case "*"
            echo "core"  # Default for any other subnet         else
    end                 echo "core-router"  # Default for other 192.168.x.x routers
end                end

# Function to find associated SSID for a MAC address  # Default for any other subnet's router
function find_associated_ssid
    set mac $argv[1]else
    
    # Try different methods to find the SSID associated with this MAC
    # Method 1: Check iwinfo associations
    for device in (ls -1 /sys/class/net/ | grep wlan)
        set assoc_info (iwinfo $device assoclist 2>/dev/null)d. -f3)
        if echo "$assoc_info" | grep -q -i "$mac"
            # Found association, extract the SSID
            set ssid (iwinfo $device info 2>/dev/null | grep ESSID | cut -d'"' -f2)core"
            if test -n "$ssid""
                echo "$ssid"echo "nexus"
                return 0     case "20"
            end             echo "nodes"
        end             case "70"
    end                    echo "meta"
    
    # Method 2: Check wireless UCI configuration
    # This finds which SSID a device is authorized for via MAC filtering
    set wireless_configs (uci show wireless | grep maclist | grep -i "$mac")"  # Default for 10.0.x.x
    if test -n "$wireless_configs"
        # Extract the wireless interface
        set interface_id (echo $wireless_configs | cut -d'.' -f2)uest network
        # Get the SSID for this interface
        set ssid (uci -q get wireless.$interface_id.ssid)third_octet" = "90"
        if test -n "$ssid" "guest"
            echo "$ssid"
            return 0         echo "core"  # Default for other 192.168.x.x
        end         end
    end        case "*"
    o "core"  # Default for any other subnet
    # No SSID found
    echo ""
    return 1
end
ID for a MAC address
# Get all host sections from UCI
set host_sections (uci show dhcp | grep "=host$" | cut -d'=' -f1)[1]
set entry_count 0    
the SSID associated with this MAC
if test (count $host_sections) -eq 0
    echo "$yellow""No static DHCP leases found in UCI configuration.""$reset"for device in (ls -1 /sys/class/net/ | grep wlan)
else
    echo "$green""Found "(count $host_sections)" static DHCP leases.""$reset"    if echo "$assoc_info" | grep -q -i "$mac"
    extract the SSID
    for section in $host_sections2>/dev/null | grep ESSID | cut -d'"' -f2)
        # Extract properties for each host
        set mac (uci -q get "$section.mac")
        set ip (uci -q get "$section.ip")
        set name (uci -q get "$section.name")
        set interface (uci -q get "$section.interface")end
        
        # Skip if essential information is missing
        if test -z "$mac" -o -z "$ip"
            echo "$yellow""Skipping incomplete entry: $section (missing MAC or IP)""$reset"ch SSID a device is authorized for via MAC filtering
            continueeless_configs (uci show wireless | grep maclist | grep -i "$mac")
        endest -n "$wireless_configs"
        
        # Use hostname as name if name is not setecho $wireless_configs | cut -d'.' -f2)
        if test -z "$name"
            # Try to get from other sourcessid)
            set name (uci -q get "$section.hostname")
            # If still empty, generate a name based on IP
            if test -z "$name"
                set name "device-"(echo $ip | tr '.' '-')
            end
        end
        
        # Determine network based on interface or IP subnet
        set network ""
        if test -n "$interface"
            # Direct mapping from interface to network
            switch $interfaceom UCI
                case "lan"p "=host$" | cut -d'=' -f1)
                    set network "core"
                case "*"
                    # Try to use the interface name directly if it matches a network name
                    if contains $interface "core" "guest" "iot" "meta" "nexus" "nodes" in UCI configuration.""$reset"
                        set network $interface
                    endn""Found "(count $host_sections)" static DHCP leases.""$reset"
            end
        endsection in $host_sections
        
        # If network still not determined, use IP-based detection$section.mac")
        if test -z "$network"
            set network (determine_network_from_ip $ip) name (uci -q get "$section.name")
        endset interface (uci -q get "$section.interface")
        
        # Write to output file - back to 4-parameter format
        echo "$mac,$ip,$name,$network" >> "$OUTPUT_FILE"
        echo "$blue""Processed: $mac → $ip ($name) on $network""$reset"    echo "$yellow""Skipping incomplete entry: $section (missing MAC or IP)""$reset"
        
        set entry_count (math $entry_count + 1) end
    end    
    
    echo "$green""Successfully extracted $entry_count static DHCP leases to $OUTPUT_FILE""$reset"
    echo "$yellow""Review the generated file and make any necessary adjustments to network and SSID assignments.""$reset"
    echo "$yellow""Some entries may need manual editing to properly categorize devices.""$reset"          set name (uci -q get "$section.hostname")
fi            # If still empty, generate a name based on IP

# Add a verification section to check for duplicate IPs or MACs')
echo "$blue""Performing verification checks...""$reset"            end

# Check for duplicate MAC addresses
set duplicate_macs (cat "$OUTPUT_FILE" | grep -v "^#" | cut -d',' -f1 | sort | uniq -d)based on interface or IP subnet
if test -n "$duplicate_macs"
    echo "$red""WARNING: Duplicate MAC addresses found:""$reset""
    for mac in $duplicate_macs
        echo "$red""  $mac appears multiple times""$reset"     switch $interface
    end              case "lan"
fi                    set network "core"

# Check for duplicate IP addressesame
set duplicate_ips (cat "$OUTPUT_FILE" | grep -v "^#" | cut -d',' -f2 | sort | uniq -d)ains $interface "core" "guest" "iot" "meta" "nexus" "nodes"
if test -n "$duplicate_ips"
    echo "$red""WARNING: Duplicate IP addresses found:""$reset"
    for ip in $duplicate_ips
        echo "$red""  $ip appears multiple times""$reset" end
    end      
fi        # If network still not determined, use IP-based detection

echo "$purple""Extraction complete. Use this file as maclist.csv for FastWrt configuration.""$reset"
echo "$green""To use the generated file: cp $OUTPUT_FILE /path/to/FastWrt/maclist.csv""$reset"        end

        
        # Write to output file - back to 4-parameter format
        echo "$mac,$ip,$name,$network" >> "$OUTPUT_FILE"
        echo "$blue""Processed: $mac → $ip ($name) on $network""$reset"
        
        set entry_count (math $entry_count + 1)
    end
    
    echo "$green""Successfully extracted $entry_count static DHCP leases to $OUTPUT_FILE""$reset"
    echo "$yellow""Review the generated file and make any necessary adjustments to network and SSID assignments.""$reset"
    echo "$yellow""Some entries may need manual editing to properly categorize devices.""$reset"
fi

# Add a verification section to check for duplicate IPs or MACs
echo "$blue""Performing verification checks...""$reset"

# Check for duplicate MAC addresses
set duplicate_macs (cat "$OUTPUT_FILE" | grep -v "^#" | cut -d',' -f1 | sort | uniq -d)
if test -n "$duplicate_macs"
    echo "$red""WARNING: Duplicate MAC addresses found:""$reset"
    for mac in $duplicate_macs
        echo "$red""  $mac appears multiple times""$reset"
    end
fi

# Check for duplicate IP addresses
set duplicate_ips (cat "$OUTPUT_FILE" | grep -v "^#" | cut -d',' -f2 | sort | uniq -d)
if test -n "$duplicate_ips"
    echo "$red""WARNING: Duplicate IP addresses found:""$reset"
    for ip in $duplicate_ips
        echo "$red""  $ip appears multiple times""$reset"
    end
fi

echo "$purple""Extraction complete. Use this file as maclist.csv for FastWrt configuration.""$reset"
echo "$green""To use the generated file: cp $OUTPUT_FILE /path/to/FastWrt/maclist.csv""$reset"
